// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quicksite.API.Data;

#nullable disable

namespace Quicksite.API.Migrations
{
    [DbContext(typeof(QuicksiteDbContext))]
    [Migration("20250503145858_add name prop to website class")]
    partial class addnameproptowebsiteclass
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Quicksite.API.Models.Domains.AcademicProfile", b =>
                {
                    b.Property<Guid>("AcademicProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoogleScholarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicProfileId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("AcademicProfiles");
                });

            modelBuilder.Entity("Quicksite.API.Models.Domains.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Quicksite.API.Models.Domains.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Quicksite.API.Models.Domains.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Quicksite.API.Models.Domains.Template", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemplateId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Quicksite.API.Models.Domains.Website", b =>
                {
                    b.Property<Guid>("WebsiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HostUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WebsiteId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("TemplateId");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("Quicksite.API.Models.Domains.AcademicProfile", b =>
                {
                    b.HasOne("Quicksite.API.Models.Domains.Customer", "Customer")
                        .WithOne("AcademicProfile")
                        .HasForeignKey("Quicksite.API.Models.Domains.AcademicProfile", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Quicksite.API.Models.Domains.Payment", b =>
                {
                    b.HasOne("Quicksite.API.Models.Domains.Customer", "Customer")
                        .WithOne("Payment")
                        .HasForeignKey("Quicksite.API.Models.Domains.Payment", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Quicksite.API.Models.Domains.Website", b =>
                {
                    b.HasOne("Quicksite.API.Models.Domains.Customer", "Customer")
                        .WithOne("Website")
                        .HasForeignKey("Quicksite.API.Models.Domains.Website", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quicksite.API.Models.Domains.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Customer");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Quicksite.API.Models.Domains.Customer", b =>
                {
                    b.Navigation("AcademicProfile")
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Website");
                });
#pragma warning restore 612, 618
        }
    }
}
